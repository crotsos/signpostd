Requirements :Linux (debian - ubuntu)
=====================================

compilation requirements:

> apt-get install git ocaml ocaml-compiler-libs camlp4-extra zlib1g-dev libssl-dev libnl-route-3-dev m4 uml-utilities

tactics requirements:

> apt-get install tor openvpn privoxy 

openflow:
> apt-get install openvswitch-switch opemvswitch-datapath-dkms

> update-rc.d tor disable

> update-rc.d privoxy disable

> /etc/init.d/tor stop

> /etc/init.d/privoxy stop

Openvswitch configuration
-------------------------

Configuring openvswitch on a remote server is triky as it may lead to loss of connectivity. In order to avoid any problem,
I usually bypass the default openvswitch init script and write a small script to do the trick. The script I use is the 
following:

>#!/usr/bin/env bash 

# run with:
# screen -S ovs sudo sh init.sh
 
intf=eth0 # whichever the nme of the intf is.

modprobe -r bridge
modprobe openvswitch_mod

if [ ! -d /etc/signpost/ ]; then
  mkdir /etc/signpost/
fi

if [ ! -r /etc/signpost/conf.db ]; then
  ovsdb-tool create /etc/signpost/conf.db  /usr/share/openvswitch/vswitch.ovsschema
fi

ovsdb-server /etc/signpost/conf.db  --remote=punix:/var/run/openvswitch/db.sock --detach --monitor
ovs-vswitchd  unix:/var/run/openvswitch/db.sock --detach --monitor

ovs-vsctl add-br br0
ovs-vsctl add-port $intf 
ovs-vsctl set-controller br0 tcp:0.0.0.0:6633
ovs-vsctl set-fail-mode br0 standalone

ifconfig $intf 0.0.0.0
ifconfig br0 up 
dclient br0 -v &

echo "pls press Ctrl+C in order to stop the vm from rebooting...."
sleep 60 

shutdown -r now
>

In order to add more interface under the bridge control you need to issue:
> ovs-vsctl add-port br0 intf


Requirements: MacOSX 
====================

For the time being signpost code can find all required liraries from the Xcode development bundle. 
In order to fetch tunnelling tools you need to install brew following instructions at `ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"`.
once brew is installed and passes all tests, you should issue `brew install ocaml openvpn tor privoxy`

Openflow ocaml switch configuration
-----------------------------------

The following steps need to be taken in order to enable the openflow switch working on the macosx.

Firstly you need to download and install an experimental package of the tuntap software. This program version will 
allow you to set appropriatelty the mac address of the tap interface. Current stable version fails to update
the mac address of the device when ifconfig laddr is used and results in an error when the default macosx dhcp client kicks in. (The client 
mac address used in the protocol is the random one generated by tun tap when the interface is firstly created.)
http://sourceforge.net/p/tuntaposx/bugs/_discuss/thread/78f8f847/2665/attachment/tuntap_20120707-experimental.tar.gz

For every device added under the switch control needs to disable any networking functionality configured by macosx system. In order to do this
you need to go to System Preferences > Network, choose the interface you are using, select advanced and in 
the tcp/ip tab on the "Configure IPv4" drop down menu you need to select off. This will forbid the osx to
change any ip layer configurations on the interface, but will keep the link up and connected. 

A side afect of the previous configuration is that the os will not be able to use dns service. File /etc/resolv.conf
cannot be used in order to configure dns service, as the os will not respect any configurations done to the file.
In order to configure dns when the network is not configured by the os, you need to do the trick described at 
http://serverfault.com/questions/22419/set-dns-server-on-os-x-even-when-without-internet-connection. 

> mkdir /etc/resolver/

> echo 'nameserver 8.8.8.8' > /etc/resolver/signpost

> echo 'domain .' >> /etc/resolver/signpost

In order to run the user space ocaml-based openflow switch you need to enable the 4.00.1+mirage-unix backend and install the openflow package.
In order to do this you need to run : 

> opam switch 4.00.1+mirage-unix

> eval `opam config -env`

> opam install openflow 

Once you have made this configuration, you need then to start the openflow switch, by running `sudo basic_switch_lwt`.
In order to get network connectivity on the command line you need to configure the tap0 interface using ipconfig tool.
* In order to use the dhcp protocol you need to run `sudo ipconfig set tap0 dhcp`
* In order to set manually the network configuration `sudo ipconfig set tap0 manual ip netmask`

> brew install libevent

> brew link --overwrite libevent 

> brew install tor 

> curl http://tunnelblick.googlecode.com/files/Tunnelblick_3.2.8.dmg > Tunnelblick_3.2.8.dmg # mount dmg and install program

> sudo ln -s /Applications/Tunnelblick.app/Contents/Resources/openvpn/openvpn-2.1.4/openvpn /usr/sbin/openvpn

Finally, in order to allow ssh to create tap interfaces over ssh, you need to enable the root account on your mac and add your account
in group wheel. 

In order to enable the root account on your mac you need to follow these instructions: http://support.apple.com/kb/ht1528. 
Additionally you need to allow signpost to read the root folder. In order to achieve this you need to enable to view all 
files thourght the finder ( run `defaults write com.apple.Finder AppleShowAllFiles YES` on the command line), and then 
browse through finder to the /var/root/ (From finder menu choose Go -> Go to folder -> type /var/. select folder root, right 
click on it, select "Get Info" from the menu and on the "Sharing & Permission" pane select "read only" for everyone. You need to
unlock editing in order to allow change the access rights of the file.).

In order to add your account to the wheel group, you need to run on the terminal the command `sudo /usr/bin/dscl . -append /groups/wheel GroupMembership username`.

Opam code installation and signpostd dependency 
===============================================

> git clone git://github.com/OCamlPro/opam.git

> cd opam/

> make ; make install

> opam init 

> eval `opam config -env`

> opam switch 4.00.1

> opam remote -kind git -add signpostd git://github.com/crotsos/opam-repo-dev.git

> opam install ocamlgraph ssl oasis signpostd # this is to get the required libraries. 

Building signpost Code
======================

In order to build signpost source code you need to follow the following steps:

> git pull git://github.com/crotsos/signpostd.git

> cd signpostd

> make 

Running signpost
================

Signpost currently allows parametisation of the code at compile time only. In order to modify the parameters of sigpost, 
you need to modify file lib/config.ml and recompile the code. The following parameters are provided by the code:
* signpost_number : this define the name of the signpost subdomain that the device belongs too. The name of the domain will 
be d$(signpost_number).signpo.st
* signpost_number : this is the number of the domain under which the device belongs to. For example a value of 1 will mean
    that the device is under the domain d1.domain.
* domain: the domain name under which the user domain can be found. Currently, this is signpo.st. 
* external_ip : the ip that the control channel that signpost is running. 
* external_dns : the ip of the signpost dns server.
* dir : the location of the signpostd code. 
* conf_dir : the location of the signpost configuration directory. This is expected to be $dir ^ "/conf/".
* tmp_dir : the location that signpost will use to put the intermediate files generated by tactics. This is expected to $dir ^ "/tmp/".
* iodine_node_ip : the ip under the iodine subnet that the signpost server is running.
* ns_server : the ip of the resolver that the sytem will use to service non signpost dns requests.
* signal_port : the port that the control service is running. 
* dns_port : (obsolete) the port of the signpost dns service on external_dns ip. 
* net_intf : the name of the network interfae that the system is expected to forward traffic by default. This is required
            when the output device is under the bridge and we need to confirure the default paths. 
* bridge_intf : the name of the bridge device. "tap0" for macosx, and br0 for linux, usually.
* root_dir : the home folder for the root account. /var/root/ for macosx, /root/ for linux. 

In order to run signpost, 2 scripts can be used: scripts/run-client and scripts/run-server. 

Before running run-client script, the use should define a correct name for the device. This is defined by the env variable
NODE_NAME. The resulting fqdn for the device will $(NODE_NAME).d$(signpost_number).signpo.st. 

In order to run the server script, you need to make sure that a folder signpostd/conf/authorized_keys exists. 

Because tor tactic has very strict requirements on the uid running the process, users must be carefull to place signpostd 
code under a directory that the files are accessible by all system users. 

Generate signpost device keys 
------------------------------

In order to generate a key pair for a signpost device you need to perform the following steps on the device. 

> openssl genrsa -out signpostd/conf/signpost.pem

> chown root:root  signpostd/conf/signpost.pem; chmod a-rwx  signpostd/conf/signpost.pem; chmod u+r  signpostd/conf/signpost.pem

> openssl rsa -in  signpostd/conf/signpost.pem -pubout -out $(NODE_NAME).pub.

The final step will provide you with a public key, and a copy of it should be placed under dir signpostd/conf/authorized_keys
In order for the keys to become effective for the device. 
